package com.mashibing.juc.c_026_00_interview.A1B2C3;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

//生产者消费者模型
/*private final ReentrantLock lock;
private final Condition conditionWrite;//声明两个锁条件
private final Condition conditionRead;*/
public class Test1 {
    public static void main(String[] args) throws InterruptedException {
        Test1 test1 = new Test1(5);
        Producer producer = new Producer(test1);
        Comsumer comsumer = new Comsumer(test1);
        new Thread(comsumer).start();
        Thread.sleep(3000);
        new Thread(producer).start();


    }
    Boolean flag = false;
    private int maxSize;
    private List<String> messages;

    private final ReentrantLock lock;
    private final Condition conditionWrite;//声明两个锁条件
    private final Condition conditionRead;
    public Test1(int maxSize) {
        this.maxSize = maxSize;
        messages = new LinkedList<String>();
        lock = new ReentrantLock(true);//true修改锁的公平性，为true时，使用lifo队列来顺序获得锁
        conditionWrite = lock.newCondition();//调用newCondition()方法，即new ConditionObject();
        conditionRead = lock.newCondition();

    }
    public void set(String message){
        //使用锁实现同步，获取所得操作，当锁被其他线程占用时，当前线程将进入休眠
        lock.lock();
        try{
            while(messages.size() == maxSize){
                System.out.print("the message buffer is full now,start into wait()\n");
                conditionWrite.await();//满足条件时，线程休眠并释放锁。当调用 signalAll()时。线程唤醒并重新获得锁
            }
            Thread.sleep(100);
            messages.add(message);
            System.out.print("add message:"+message+" success\n");
            conditionRead.signalAll();//唤醒因conditionRead.await()休眠的线程
            flag = false;
        }catch (InterruptedException e){
            e.printStackTrace();
        }finally {
            lock.unlock();
        }
    }
    public String get(){
        String message = null;
        lock.lock();
        try{
            while(messages.size() == 0){
                System.out.print("the message buffer is empty now,start into wait()\n");
                flag = true;
                conditionRead.await();//当没有元素的时候，线程进入Read队列里面进行休息
                //condition可以理解为两个空间，可以选择去不同的空间进行休息，当你唤醒的时候可以指定的去唤醒
            }
            Thread.sleep(100);
            message = ((LinkedList<String>)messages).poll();
            System.out.print("get message:"+message+" success\n");
            conditionWrite.signalAll();
        }catch (InterruptedException e){
            e.printStackTrace();
        }finally {
            lock.unlock();
        }
        return message;
    }
}
class Comsumer implements Runnable{
    private Test1 test1 = null;

    public Comsumer(Test1 test1) {
        this.test1 = test1;
    }

    @Override
    public void run() {
        for (int i = 0;i<15;i++) {
            this.test1.get();
        }
    }
}
class Producer implements Runnable{
    private Test1 test1 = null;


    public Producer(Test1 test1) {
        this.test1 = test1;
    }

    @Override
    public void run() {
        for (int i = 0;i<10;i++) {
            this.test1.set("kkkkkk"+i);
        }
    }
}